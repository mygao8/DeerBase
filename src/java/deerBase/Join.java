package deerBase;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;
    private DbIterator childItr1;
    private DbIterator childItr2;
    private String joinField1Name;
    private String joinField2Name;
    private TupleDesc td;
    private Iterator<Tuple> joinedTupleItr;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate joinPredicate, DbIterator childItr1, DbIterator childItr2) {
        this.joinPredicate = joinPredicate;
        this.childItr1 = childItr1;
        this.childItr2 = childItr2;
        this.joinField1Name = childItr1.getTupleDesc()
        		.getFieldName(joinPredicate.getFieldIdx1());
        this.joinField2Name = childItr2.getTupleDesc()
        		.getFieldName(joinPredicate.getFieldIdx2());
        this.td = TupleDesc.merge(
        		childItr1.getTupleDesc(), childItr2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
    	return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	return joinField1Name;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return joinField2Name;
    }

    /**
     *  {@link deerBase.TupleDesc#merge(TupleDesc, TupleDesc)} for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        childItr1.open();
        childItr2.open();
        super.open();
        joinedTupleItr = NestedLoopJoin();
    }

    public void close() {
        childItr1.close();
        childItr2.close();
        super.close();
        joinedTupleItr = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        childItr1.rewind();
        childItr2.rewind();
        joinedTupleItr = NestedLoopJoin();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @link JoinPredicate#filter(Tuple, Tuple)
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (joinedTupleItr != null && joinedTupleItr.hasNext()) {
    		return joinedTupleItr.next();
    	}
    	return null;
    }
    
    private Iterator<Tuple> NestedLoopJoin() throws TransactionAbortedException, DbException {
    	ArrayList<Tuple> tupleAr = new ArrayList<Tuple>();
    	Tuple leftTuple;
    	Tuple rightTuple;
    	childItr1.rewind();
    	while (childItr1.hasNext()) {
    		leftTuple = childItr1.next();
    		childItr2.rewind();
    		while (childItr2.hasNext()) {
				rightTuple = childItr2.next();
				if (joinPredicate.filter(leftTuple, rightTuple)) {
					tupleAr.add(mergeTuple(leftTuple, rightTuple));
				}
			}
    	}
    	
        return tupleAr.iterator();
    }
    
    private Tuple mergeTuple(Tuple t1, Tuple t2) {
    	Tuple resTuple = new Tuple(td);
    	Iterator<Field> t1Itr = t1.fields();
    	Iterator<Field> t2Itr = t2.fields();
    	
    	int i = 0;
    	while (t1Itr.hasNext()) {
    		resTuple.setField(i++, t1Itr.next());
    	}
    	while (t2Itr.hasNext()) {
    		resTuple.setField(i++, t2Itr.next());
    	}
    	
    	return resTuple;
    }

    @Override
    public DbIterator[] getChildren() {
    	return new DbIterator[]{this.childItr1, this.childItr2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if (childItr1 != children[0]) {
        	childItr1 = children[0];
        }
        if (childItr2 != children[1]) {
        	childItr2 = children[1];
        }
    }

}
